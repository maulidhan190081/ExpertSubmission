# -*- coding: utf-8 -*-
"""Submission_ProyekPertama_Expert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RNv1tZPozbUWSt1WSnFQeIUfGnJdplkQ

# Proyek Prediksi Harga Rumah: [California Housing Prices]
- **Nama:** [Maulidhan Ady Nugraha]
- **Email:** [maulidhan6@gmail.com]
- **ID Dicoding:** [maulidhanadynugraha]

## Import Packages/Library

import seluruh library yang digunakan
"""

from google.colab import files
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, GRU, Dense
from IPython.display import HTML

import pandas as pd
import numpy as np

"""### Link Data

link data yang saya gunakan adalah sebagai berikut (opensource)
"""

# Buat link
HTML('<a href="https://www.kaggle.com/datasets/camnugent/california-housing-prices" target="_blank">California Housing Prices</a>')

"""## Data Preparation

### Data Loading

proses uploud data ke colab
"""

uploaded = files.upload()

"""menampilkan data yang telah diupload"""

df = pd.read_csv('housing.csv')
df.head()

"""### Data Preprocessing

menampilkan seluruh informasi data
"""

df.info()

"""menampilkan jumlah data yang kosong"""

df.isnull().sum()

"""menampilkan data yang kosong pada kolom total bedrooms"""

df[(df.isnull()).any(axis=1)]

"""menghapus data yang kosong"""

df.dropna(inplace=True)

"""mengecek kembali jumlah data yang kosong"""

df.isnull().sum()

"""mengecek kembali informasi data"""

df.info()

"""menegecek kategori yang ada pada kolom ocean_proximity untuk diubah menjadi boolean"""

df['ocean_proximity'].unique()

"""mengubah kategori tersebut menjadi boolean, menggunkan onehot encoding"""

# Encoding Fitur Kategori
df = pd.concat([df, pd.get_dummies(df["ocean_proximity"], prefix="ocean_proximity")], axis=1)
df.drop(["ocean_proximity"], axis=1, inplace=True)
df.head()

"""#### Split Dataset

melakukan split pada pada kolom yang digunakan yaitu kolom median_house_value
"""

X = df.drop('median_house_value', axis=1)
y = df['median_house_value']  # Target yang ingin diprediksi

"""membaginya menjadi ukuran 80% untuk data training dan 20% untuk data test"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""mengecek ukuran setiap data"""

print(f"Training data: {X_train.shape}, {y_train.shape}")
print(f"Testing data: {X_test.shape}, {y_test.shape}")

"""menampilkan data yang telah dihapus (sudah tidak ada)"""

df.head(291)

"""menampilkan y_train"""

y_train

"""menampilkan data"""

df

"""## Modelling

Parameter yang digunakan adalah epochs=20, batch_size=32
"""

epochs =20
batch_size = 32

"""### LSTM

modelling menggunakan LSTM
"""

# Data scaling
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

y_train_scaled = scaler.fit_transform(y_train.values.reshape(-1, 1))
y_test_scaled = scaler.transform(y_test.values.reshape(-1, 1))

# Reshape data for LSTM (samples, timesteps, features)
X_train_reshaped = X_train_scaled.reshape(X_train_scaled.shape[0], 1, X_train_scaled.shape[1])
X_test_reshaped = X_test_scaled.reshape(X_test_scaled.shape[0], 1, X_test_scaled.shape[1])

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(X_train_reshaped.shape[1], X_train_reshaped.shape[2])))
model.add(Dense(1,  activation='linear'))
model.compile(optimizer='adam', loss='mse')

# Train the model
model_lstm=model.fit(X_train_reshaped, y_train_scaled, epochs=epochs, batch_size=batch_size, verbose=1)

# Make predictions
y_pred = model.predict(X_test_reshaped)


# Evaluate the model
mse_lstm = mean_squared_error(y_test_scaled, y_pred)
print(f'Mean Squared Error: {mse_lstm}')

"""### GRU

Moddellling menggunakan GRU
"""

# Data scaling
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
y_train_scaled = scaler.fit_transform(y_train.values.reshape(-1, 1))
y_test_scaled = scaler.transform(y_test.values.reshape(-1, 1))


# Reshape data for GRU (samples, timesteps, features)
X_train_reshaped = X_train_scaled.reshape(X_train_scaled.shape[0], 1, X_train_scaled.shape[1])
X_test_reshaped = X_test_scaled.reshape(X_test_scaled.shape[0], 1, X_test_scaled.shape[1])

# Build the GRU model

model = Sequential()
model.add(GRU(50, activation='relu', input_shape=(X_train_reshaped.shape[1], X_train_reshaped.shape[2])))
model.add(Dense(1)) # Linear activation for regression
model.compile(optimizer='adam', loss='mse')

# Train the model
model_gru=model.fit(X_train_reshaped, y_train_scaled, epochs=epochs, batch_size=batch_size, verbose=1)

# Make predictions
y_pred = model.predict(X_test_reshaped)



# Evaluate the model
mse_gru = mean_squared_error(y_test_scaled, y_pred)
print(f'Mean Squared Error: {mse_gru}')

"""## Evaluasi dan Visualisasi

Menampilkan hasil perbandingan dari prosses training
"""

import matplotlib.pyplot as plt

# Training history for LSTM
history_lstm = model_lstm

# Training history for GRU
history_gru = model_gru

# Plot both LSTM and GRU training loss on the same plot
plt.figure(figsize=(6, 3))
plt.plot(history_lstm.history['loss'], label='LSTM Training Loss')
plt.plot(history_gru.history['loss'], label='GRU Training Loss')
plt.title('LSTM vs GRU Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()
print(f"Last LSTM Loss: {history_lstm.history['loss'][-1]}")
print(f"Last GRU Loss: {history_gru.history['loss'][-1]}")

"""Menampikan hasil perbandingan MSE"""

# Bar plot for MSE comparison
plt.figure(figsize=(6, 6))
plt.bar(['LSTM', 'GRU'], [mse_lstm, mse_gru], color=['skyblue', 'lightcoral'])
plt.title('MSE Comparison: LSTM vs. GRU')
plt.ylabel('Mean Squared Error')
plt.ylim(0, max(mse_lstm, mse_gru) * 1.2)
for i, v in enumerate([mse_lstm, mse_gru]):
    plt.text(i, v + 0.01, str(round(v, 4)), ha='center', va='bottom')
plt.show()
print(f"MSE LSTM: {mse_lstm}")
print(f"MSE GRU: {mse_gru}")